<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面向对象（类与对象）</title>
      <link href="posts/2.html"/>
      <url>posts/2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="面向对象1"><a href="#面向对象1" class="headerlink" title="面向对象1"></a>面向对象1</h1><h2 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1.类与对象"></a>1.类与对象</h2><h3 id="1-1类与对象的创建及使用"><a href="#1-1类与对象的创建及使用" class="headerlink" title="1.1类与对象的创建及使用"></a>1.1类与对象的创建及使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 一、设计类、其实就是设计类的成员 * Field = 属性 = 成员变量 = 域、字段 * Method = (成员)方法 = 函数  *  * 创建类 = 类的实例化 = 实例化类 *  * 二.类和对象的使用(面向对象思想落地的实现) * 1.创建类，设计类的成员 * 2.创建类的对象 * 3.通过“对象.属性”或“对象.方法”调用对象的结构 * 三、如果创建类一个类的多个对象，则每个对象都独立的拥有一套类的属性。(非 static 的) *   意味着:如果我们修改一个对象的属性 a，则不影响另外一个对象属性 a 的值。 */</span><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//2.创建 Person 类的对象</span><span class="token comment">//创建对象语法：类名对象名= new 类名();</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Scanner scan = new Scanner(System.in);</span><span class="token comment">//调用类的结构：属性、方法</span><span class="token comment">//调用属性:“对象.属性”</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>isMale <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用方法:“对象.方法”</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token string">"chinese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//**********************</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>isMale<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//**********************</span><span class="token comment">//将 p1 变量保存的对象地址值赋给 p3,导致 p1 和 p3 指向了堆空间中的一个对象实体。</span><span class="token class-name">Person</span> p3 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>p3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/* * 类的语法格式： * 修饰符 class 类名{ * 属性声明; * 方法声明; * } * 说明：修饰符 public：类可以被任意访问类的正文要用{  }括起来 */</span><span class="token comment">//1.创建类，设计类的成员</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token comment">//属性:对应类中的成员变量</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span><span class="token comment">//方法:对应类中的成员方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token class-name">String</span> language<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人可以说话，使用的是："</span> <span class="token operator">+</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">关于创建对象的内存解析理解与举例<span class="token class-name">Person</span> p1<span class="token operator">=</span> <span class="token function">newPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>isMale <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sysout</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span><span class="token class-name">Person</span> p3 <span class="token operator">=</span> p1<span class="token punctuation">;</span>p3<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/e10710c43389ff33e23d546de2ee864a.png"></p><p>堆（Heap），此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在 Java 虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。<br>通常所说的栈（Stack），是指虚拟机栈。虚拟机栈用于存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不等同于对象本身，是对象在堆内存的首地址）。方法执行完，自动释放。</p><h3 id="1-2类的成员之一：属性"><a href="#1-2类的成员之一：属性" class="headerlink" title="1.2类的成员之一：属性"></a>1.2类的成员之一：属性</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 类中属性的使用 *  * 属性(成员变量)vs局部变量 * 1.相同点: * 1.1 定义变量的格式:数据类型 变量名 = 变量值 * 1.2 先声明，后使用 * 1.3 变量都有其对应的作用域 *  * 2.不同点: * 2.1 在类中声明的位置不同 * 属性:直接定义在类的一对{}内 * 局部变量:声明在方法内、方法形参、构造器形参、构造器内部的变量 *  * 2.2 关于权限修饰符的不同 * 属性:可以在声明属性时，指明其权限，使用权限修饰符。 * 常用的权限修饰符:private、public、缺省、protected * 目前声明属性时，都使用缺省即可。 * 局部变量:不可以使用权限修饰符。 *  * 2.3 默认初始化值的情况: * 属性:类的属性，根据其类型，都有默认初始化值。 * 整型(byte、short、int、long):0 * 浮点型(float、double):0.0 * 字符型(char):0(或‘\u0000’) * 布尔型(boolean):false *  * 引用数据类型(类、数组、接口):null *  * 局部变量:没有默认初始化值 * 意味着:在调用局部变量之前，一定要显式赋值。 * 特别地:形参在调用时,赋值即可。例，45 行 *  * 2.4 在内存中加载的位置，亦各不相同。 * 属性:加载到堆空间中(非 static) * 局部变量:加载到栈空间 */public class UserTest {public static void main(String[] args) {User u1 = new User();System.out.println(u1.name);System.out.println(u1.age);System.out.println(u1.isMale);u1.talk("俄语");}}class User{//属性(或成员变量)String name;//不加 private 即为缺省public int age;//不加 public 即为缺省boolean isMale;public void talk(String language){//language:形参，也是局部变量System.out.println("我们使用" + language + "进行交流。");}public void eat(){String food = "石头饼";//石头饼:局部变量System.out.println("北方人喜欢吃:" + food);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3类的成员之二：方法"><a href="#1-3类的成员之二：方法" class="headerlink" title="1.3类的成员之二：方法"></a>1.3类的成员之二：方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 类中方法的声明和使用 *  * 方法：描述类应该具有的功能。 * 比如：Math类：sqrt()\random() \... *     Scanner类：nextXxx() ... *     Arrays类：sort() \ binarySearch() \ toString() \ equals() \ ... *  * 1.举例： * public void eat(){} * public void sleep(int hour){} * public String getName(){} * public String getNation(String nation){} *  * 2. 方法的声明：权限修饰符  返回值类型  方法名(形参列表){ * 方法体 *   } *   注意：static、final、abstract 来修饰的方法，后面再讲。 *    * 3. 说明： * 3.1 关于权限修饰符：默认方法的权限修饰符先都使用public * Java规定的4种权限修饰符：private、public、缺省、protected  --&gt;封装性再细说 *  * 3.2 返回值类型： 有返回值  vs 没有返回值 * 3.2.1  如果方法有返回值，则必须在方法声明时，指定返回值的类型。同时，方法中，需要使用 *                return关键字来返回指定类型的变量或常量：“return 数据”。 *   如果方法没有返回值，则方法声明时，使用void来表示。通常，没有返回值的方法中，就不需要 *               使用return.但是，如果使用的话，只能“return;”表示结束此方法的意思。 *  * 3.2.2 我们定义方法该不该有返回值？ * ① 题目要求 * ② 凭经验：具体问题具体分析 *  *      3.3 方法名：属于标识符，遵循标识符的规则和规范，“见名知意” *      3.4 形参列表:方法名可以声明0个、1个，或多个形参。 *      3.4.1 格式:数据类型1 形参1，数据类型2 形参2,... *       *      3.4.2 我们定义方法时，该不该定义形参？ *      ① 题目要求 *      ② 凭经验，具体问题具体分析 *      3.5 方法体:方法功能的体现。 *  4. return关键字的使用： *  1.使用范围:使用在方法体中 *  2.作业:① 结束方法 *    ② 针对于有返回值类型的方法，使用"return 数据"方法返回所要的数据。 *  3.注意点:return关键字后不可声明执行语句。 *  5. 方法的使用中，可以调用当前类的属性或方法。 *  特殊的:方法A中又调用了方法A:递归方法。 *  方法中不能定义其他方法。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Customer</span> cust1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cust1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试形参是否需要设置的问题</span><span class="token comment">//int[] arr = new int[]{3,4,5,2,5};</span><span class="token comment">//cust1.sort();</span>cust1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//客户类</span><span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">{</span><span class="token comment">//属性</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span><span class="token comment">//方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//return后不可以声明表达式</span><span class="token comment">//System.out.println("hello");</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> hour<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"休息了"</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">"个小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sleep(10);</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNation</span><span class="token punctuation">(</span><span class="token class-name">String</span> nation<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">"我的国籍是："</span> <span class="token operator">+</span> nation<span class="token punctuation">;</span><span class="token keyword">return</span> info<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//体会形参是否需要设置的问题</span><span class="token comment">//public void sort(int[] arr){</span><span class="token comment">//</span><span class="token comment">//}</span><span class="token comment">//public void sort(){</span><span class="token comment">//int[] arr = new int[]{3,4,5,2,5,63,2,5};</span><span class="token comment">////。。。。</span><span class="token comment">//}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//错误的</span><span class="token comment">//public void swim(){</span><span class="token comment">//</span><span class="token comment">//}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4方法的重载"><a href="#1-4方法的重载" class="headerlink" title="1.4方法的重载"></a>1.4方法的重载</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 方法的重载(overload) loading... *  * 1.定义:在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。 *  * “两同一不同”:同一个类、相同方法名 *   参数列表不同：参数个数不同，参数类型不同 *  * 2.举例: * Arrays类中重载的sort() / binarySearch() *  * 3.判断是否重载 * 与方法的返回值类型、权限修饰符、形参变量名、方法体都无关。 *  * 4.在通过对象调用方法时，如何确定某一个指定的方法： * 方法名---》参数列表 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverLoadTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">OverLoadTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OverLoadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用的第一个，输出1</span><span class="token punctuation">}</span><span class="token comment">//如下的四个方法构成了重载</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">double</span> d1<span class="token punctuation">,</span><span class="token keyword">double</span> d2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//以下3个是错误的重载</span><span class="token comment">//public int getSum(int i,int j){</span><span class="token comment">//return 0;</span><span class="token comment">//}</span><span class="token comment">//public void getSum(int m,int n){</span><span class="token comment">//</span><span class="token comment">//}</span><span class="token comment">//private void getSum(int i,int j){</span><span class="token comment">//</span><span class="token comment">//}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5方法参数值传递机制"><a href="#1-5方法参数值传递机制" class="headerlink" title="1.5方法参数值传递机制"></a>1.5方法参数值传递机制</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 关于变量的赋值 *  * 如果变量是基本数据类型，此时赋值的是变量所保存的数据值。 * 如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值。 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueTransferTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********基本数据类型：***********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">", n = "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m <span class="token operator">+</span> <span class="token string">", n = "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********引用数据类型:********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Order</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o1<span class="token punctuation">.</span>orderId <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token class-name">Order</span> o2 <span class="token operator">=</span> o1<span class="token punctuation">;</span><span class="token comment">//赋值后，o1和o2的地址值相同，都指向了堆空间中同一个对象实体</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o1.orderId = "</span> <span class="token operator">+</span> o1<span class="token punctuation">.</span>orderId <span class="token operator">+</span> <span class="token string">",o2.orderId = "</span> <span class="token operator">+</span> o2<span class="token punctuation">.</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>o2<span class="token punctuation">.</span>orderId <span class="token operator">=</span> <span class="token number">1002</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"o1.orderId = "</span> <span class="token operator">+</span> o1<span class="token punctuation">.</span>orderId <span class="token operator">+</span> <span class="token string">",o2.orderId = "</span> <span class="token operator">+</span> o2<span class="token punctuation">.</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span><span class="token keyword">int</span> orderId<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6递归"><a href="#1-6递归" class="headerlink" title="1.6递归"></a>1.6递归</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 递归方法的使用(了解) * 1.递归方法：一个方法体内调用它自身。 * 2.方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。 *  * 3.递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursionTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 例1:计算1-100之间所有自然数的和</span><span class="token comment">// 方法1:</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>sum <span class="token operator">+=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum = "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法2:</span><span class="token class-name">RecursionTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RecursionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum1 <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum1 = "</span> <span class="token operator">+</span> sum1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 例1:计算1-n之间所有自然数的和</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">getSum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 例2:计算1-n之间所有自然数的乘积</span><span class="token comment">//归求阶乘(n!)的算法</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">getSum1</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-面向对象特征之一：封装与隐藏"><a href="#2-面向对象特征之一：封装与隐藏" class="headerlink" title="2.面向对象特征之一：封装与隐藏"></a>2.面向对象特征之一：封装与隐藏</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 面向对象的特征一:封装与隐藏 * 一、问题的引入： *    当我们创建一个类的对象以后，我们可以通过"对象.属性"的方式，对对象的属性进行赋值。这里，赋值操作要受到 *    属性的数据类型和存储范围的制约。但除此之外，没有其他制约条件。但是，实际问题中，我们往往需要给属性赋值 *    加入额外限制条件。这个条件就不能在属性声明时体现，我们只能通过方法进行条件的添加。比如说，setLegs *    同时，我们需要避免用户再使用“对象.属性”的方式对属性进行赋值。则需要将属性声明为私有的(private) *    --》此时，针对于属性就体现了封装性。 *     * 二、封装性的体现： *    我们将类的属性私有化(private),同时,提供公共的(public)方法来获取(getXxx)和设置(setXxx) *     *    拓展：封装性的体现：① 如上 ② 单例模式 ③ 不对外暴露的私有方法 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"大黄"</span><span class="token punctuation">;</span><span class="token comment">//a.age = 1;</span><span class="token comment">//a.legs = 4;//The field Animal.legs is not visible</span>a<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a.legs = -4;</span><span class="token comment">//a.setLegs(6);</span>a<span class="token punctuation">.</span><span class="token function">setLegs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a.legs = -4;//The field Animal.legs is not visible</span>a<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> legs<span class="token punctuation">;</span> <span class="token comment">//腿的个数</span><span class="token comment">//对于属性的设置</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLegs</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>legs <span class="token operator">=</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>legs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//对于属性的获取</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> legs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物进食"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">",age = "</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">",legs = "</span> <span class="token operator">+</span> legs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//提供关于属性 age 的 get 和 set 方法</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1四种权限修饰符"><a href="#2-1四种权限修饰符" class="headerlink" title="2.1四种权限修饰符"></a>2.1四种权限修饰符</h3><p>Java 权限修饰符<code>public、protected、default(缺省)、private</code> 置于类的成员定义前，用来限定对象对该类成员的访问权限。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ab992b12ef5b16774376e00dab0415e0.png"></p><p><strong>对于 class 的权限修饰只可以用 public 和 default(缺省)。</strong></p><ul><li>封装性的体现，需要权限修饰符来配合。</li><li>  1.Java 规定的 4 种权限：(从小到大排序)private、缺省、protected、public</li><li>  2.4 种权限用来修饰类及类的内部结构：属性、方法、构造器、内部类</li><li>  3.具体的，4 种权限都可以用来修饰类的内部结构：属性、方法、构造器、内部类</li><li><pre><code>     修饰类的话，只能使用：缺省、public</code></pre></li><li>总结封装性：Java 提供了 4 中权限修饰符来修饰类积累的内部结构，体现类及类的内部结构的可见性的方法。</li></ul><h3 id="2-2四种访问权限修饰符"><a href="#2-2四种访问权限修饰符" class="headerlink" title="2.2四种访问权限修饰符"></a>2.2四种访问权限修饰符</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/c10d9f7a2cfc118c122baa567ba968ca.png" alt="img"></p><h2 id="3-构造器（类的成员之三）"><a href="#3-构造器（类的成员之三）" class="headerlink" title="3.构造器（类的成员之三）"></a>3.构造器（类的成员之三）</h2><h3 id="3-1构造器理解"><a href="#3-1构造器理解" class="headerlink" title="3.1构造器理解"></a>3.1构造器理解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 类的结构之三:构造器(构造方法、constructor)的使用 * constructor: *  * 一、构造器的作用: * 1.创建对象 * 2.初始化对象的属性 *  * 二、说明 * 1.如果没有显示的定义类的构造器的话，则系统默认提供一个空参的构造器。 * 2.定义构造器的格式: * 权限修饰符  类名(形参列表) { } * 3.一个类中定义的多个构造器，彼此构成重载。 * 4.一旦显示的定义了类的构造器之后，系统不再提供默认的空参构造器。 * 5.一个类中，至少会有一个构造器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//创建类的对象:new + 构造器</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Person()这就是构造器</span>p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token comment">//属性</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//构造器</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person()......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>name <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>name <span class="token operator">=</span> n<span class="token punctuation">;</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2属性赋值的过程"><a href="#3-2属性赋值的过程" class="headerlink" title="3.2属性赋值的过程"></a>3.2属性赋值的过程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 总结:属性赋值的先后顺序 *  * ① 默认初始化值 * ② 显式初始化 * ③ 构造器中赋值 * ④ 通过"对象.方法" 或 “对象.属性”的方式，赋值 *  * 以上操作的先后顺序:① - ② - ③ - ④ *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/35c39171e6d8d7a2a25bd0c9edd48ee9.png" alt="img"></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 对属性可以赋值的位置: *  ①默认初始化 *  ②显式初始化 / ⑤在代码块中赋值 *  ③构造器中初始化 *  ④有了对象以后，可以通过"对象.属性"或"对象.方法"的方式，进行赋值。 *   *  执行的先后顺序:① - ② / ⑤ - ③ - ④ */public class OrderTest {public static void main(String[] args) {Order order = new Order();System.out.println(order.orderId);}}class Order{int orderId = 3;{orderId = 4;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3Javabean"><a href="#3-3Javabean" class="headerlink" title="3.3Javabean"></a>3.3Javabean</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * JavaBean 是一种 Java 语言写成的可重用组件。 * 所谓 javaBean，是指符合如下标准的 Java 类： * &gt; 类是公共的 * &gt; 有一个无参的公共的构造器 * &gt; 有属性，且有对应的 get、set 方法 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>id <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>name <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-UML类图"><a href="#3-4-UML类图" class="headerlink" title="3.4 UML类图"></a>3.4 UML类图</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/4245a65d9610ec85f6b80c6f520d989e.png" alt="img"></p><ul><li>表示 public 类型，-表示 private 类型，#表示 protected 类型</li><li>方法的写法: 方法的类型(+、-) 方法名(参数名：参数类型)：返回值类型</li></ul><h3 id="3-5关于构造器的一些补充理解"><a href="#3-5关于构造器的一些补充理解" class="headerlink" title="3.5关于构造器的一些补充理解"></a>3.5关于构造器的一些补充理解</h3><p>Person类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Person {String name;int age;int id = 1003;//身份证号public Person(){System.out.println("我无处不在");}public Person(String name){this.name = name;}public Person(String name,int age){this(name);this.age = age;}public void eat(){System.out.println("人，吃饭");}public void walk(){System.out.println("人，走路");}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Student类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Student extends Person{String major;int id = 1002;//学号public Student(){}public Student(String name,int age,String major){//this.age = age;//this.name = name;super(name,age);this.major = major;}public Student(String major){this.major = major;}public void eat(){System.out.println("学生多吃有营养的食物");}public void Study(){System.out.println("学生，学习知识。");this.eat();//如果，想调用父类中被重写的，不想调用子类中的方法，可以：super.eat();super.walk();//子父类中未重写的方法，用"this."或"super."调用都可以}public void show(){System.out.println("name = " + this.name + ",age = " + super.age);System.out.println("id = " + this.id);System.out.println("id = " + super.id);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class SuperTest {public static void main(String[] args) {Student s = new Student();s.show();s.Study();Student s1 = new Student("Ton",21,"IT" );s1.show();System.out.println("***********************");Student s2 = new Student();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p>![](C:\Users\立夏\Desktop\屏幕截图 2023-01-03 222021.jpg)</p><h2 id="4-this的使用"><a href="#4-this的使用" class="headerlink" title="4.this的使用"></a>4.this的使用</h2><h3 id="4-1-this调用属性，方法，构造器"><a href="#4-1-this调用属性，方法，构造器" class="headerlink" title="4.1.this调用属性，方法，构造器"></a>4.1.this调用属性，方法，构造器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * this 关键字的使用 * 1.this 用来修饰、调用：属性、方法、构造器 *  * 2.this 修饰属性和方法: * this 理解为：当前对象,或当前正在创建的对象。 *   *  2.1 在类的方法中，我们可以使用"this.属性"或"this.方法"的方式，调用当前对象属性和方法。 *  通常情况下，我们都选择省略“this.”。特殊情况下，如果方法的形参和类的属性同名，我们必须显式 *  的使用"this.变量"的方式，表明此变量是属性，而非形参。 *  *  2.2 在类的构造器中，我们可以使用"this.属性"或"this.方法"的方式，调用正在创建的对象属性和方法。 *  但是，通常情况下，我们都选择省略“this.”。特殊情况下，如果构造器的形参和类的属性同名，我们必须显式 *  的使用"this.变量"的方式，表明此变量是属性，而非形参。 *   *  3.this 调用构造器 *  ① 我们可以在类的构造器中，显式的使用"this(形参列表)"的方式，调用本类中重载的其他的构造器！ *  ② 构造器中不能通过"this(形参列表)"的方式调用自己。 *  ③ 如果一个类中声明了n个构造器，则最多有n -1个构造器中使用了"this(形参列表)"。 *  ④ "this(形参列表)"必须声明在类的构造器的首行！ *  ⑤ 在类的一个构造器中，最多只能声明一个"this(形参列表)"。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"jerry"</span> <span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">"Person 初始化时，需要考虑如下的 1,2,3,4...(共 40 行代码)"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用构造器的一种方式</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment">//this.age = age;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNmea</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-package、import-的使用"><a href="#5-package、import-的使用" class="headerlink" title="5.package、import 的使用"></a>5.package、import 的使用</h2><h3 id="5-1package"><a href="#5-1package" class="headerlink" title="5.1package"></a>5.1package</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 一、package 关键字的使用 * 1.为了更好的实现项目中类的管理，提供包的概念 * 2.使用 package 声明类或接口所属的包，声明在源文件的首行 * 3.包，属于标识符，遵循标识符的命名规则、规范"见名知意" * 4.每“.”一次,就代表一层文件目录。 *  * 补充:同一个包下，不能命名同名接口或同名类 *     不同包下，可以命名同名的接口、类。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageImportTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2import"><a href="#5-2import" class="headerlink" title="5.2import"></a>5.2import</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">account2<span class="token punctuation">.</span></span><span class="token class-name">Bank</span><span class="token punctuation">;</span><span class="token comment">/* * 二、import关键字的使用 * import:导入 * 1.在源文件中显式的使用import结构导入指定包下的类、接口 * 2.声明在包的声明和类的声明之间 * 3.如果需要导入多个结构，则并列写出即可 * 4.可以使用"xxx.*"的方式,表示可以导入xxx包下的所有结构。 * 5.如果导入的类或接口是java.lang包下的，或者是当前包下的，则可以省略此import语句。 * 6.如果在代码中使用不同包下的同名的类。那么就需要使用类的全类名的方式指明调用的是哪个类。 * 7.如果已经导入java.a包下的类。那么如果需要使用a包的子包下的类的话，仍然需要导入。 * 8.import static组合的使用：调用指定类或接口下的静态的属性或方法. *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageImportTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bank</span> bank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UserTest</span> us <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="面向对象2"><a href="#面向对象2" class="headerlink" title="面向对象2"></a>面向对象2</h1><h2 id="6-面向对象特征之二：继承性"><a href="#6-面向对象特征之二：继承性" class="headerlink" title="6.面向对象特征之二：继承性"></a>6.面向对象特征之二：继承性</h2><h3 id="6-1继承性的理解"><a href="#6-1继承性的理解" class="headerlink" title="6.1继承性的理解"></a>6.1继承性的理解</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 面向对象的特征二:继承性 *  * 为什么要有继承？ * 多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中， * 那么多个类无需再定义这些属性和行为，只要继承那个类即可。 *  * 一、继承性的好处 * ① 减少了代码的冗余，提高了代码的复用性； * ② 便于功能的扩展； * ③ 为之后多态性的使用，提供了前提。 *  * 二、继承性的格式 * class A extends B{} *  A:子类、派生类、subclass *  B:父类、超类、基类、superclass *   *  2.1 体现：一旦子类 A 继承父类以后，子类 A 中就获取了父类 B 中声明的结构：属性、方法 * 特别的，父类中声明为 private 的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。 * 只有因为封装性的影响，使得子类不能直接调用父类的结构而已。 *  2.2 子类继承父类以后，还可以声明自己特有的属性或方法，实现功能的拓展。 *  子类和父类的关系：不同于子集与集合的关系。 *  extends:延展、扩展 *  */public class ExtendsTest {public static void main(String[] args) {Person p1 = new Person();//p1.age = 1;p1.eat();System.out.println("********************");Student s1 = new Student();s1.eat();//s1.sleep();s1.name = "Tom";s1.setAge(10);System.out.println(s1.getAge());}}/*  三、Java 中关于继承性的规定： *  1.一个类可以被多个类继承 *  2.Java 中类的单继承性：一个类只能有一个父类 *  3.子父类是相对的概念。 *  4.子类直接继承的父类，称为：直接父类。间接继承的父类，称为，间接父类。 *  5.子类继承父类后，就获取了直接父类以及所有间接父类中声明的属性和方法。 *  * 四、1.如果我们没有显式的声明一个类的父类的话，则此类继承于 java.lang.Object 类 *   2.所有的 java 类(除 java.long.Object 类之外)都直接或间接地继承于 java.lang.Object 类; *   3.意味着，所有的 java 类具有 java.lang.Object 类声明的功能。 */public class ExtendsTest {public static void main(String[] args) {s1.brease();Creature c = new Creature();System.out.println(c.toString());}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/cc9569b92c2b8879b873cd05741fe753.png" alt="img"><img src="https://img-blog.csdnimg.cn/img_convert/cb041fed5ec912d35815aa8e72d8ecdf.png" alt="img"></p><h3 id="6-2继承性的练习"><a href="#6-2继承性的练习" class="headerlink" title="6.2继承性的练习"></a>6.2继承性的练习</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/c0be1eac6215b7a27e0b209d2fb4dd97.png" alt="img"></p><p>circle类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span><span class="token comment">//半径</span><span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>radius <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//计算圆的面积</span><span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span>PI <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cylinder类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cylinder</span> <span class="token keyword">extends</span> <span class="token class-name">Circle</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">double</span> length<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Cylinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>length <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLength</span><span class="token punctuation">(</span><span class="token keyword">double</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//计算圆柱体积</span><span class="token keyword">return</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class CylinderTest {public static void main(String[] args) {Cylinder cy = new Cylinder();cy.setRadius(2.1);cy.setLength(3.4);double volues = cy.findVolume();System.out.println("圆柱的体积:" + volues);double area = cy.findArea();System.out.println("圆的面积: " + area);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-方法的重写"><a href="#7-方法的重写" class="headerlink" title="7.方法的重写"></a>7.方法的重写</h2><h3 id="7-1重写的理解"><a href="#7-1重写的理解" class="headerlink" title="7.1重写的理解"></a>7.1重写的理解</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 方法的重写(override/overwrite) *  * 1.重写：子类继承父类以后，可以对父类中的方法进行覆盖操作。 * 2.应用：重写以后，当创建子类对象以后，通过子类对象去调用子父类中同名同参数方法时，执行的是子类重写父类的方法。 *   即在程序执行时，子类的方法将覆盖父类的方法。 *  * 面试题：区分方法的重载与重写(有的书也叫做“覆盖”) * 答：方法的重写Overriding和重载Overloading是Java多态性的不同表现。 * 重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。 * 如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding)。 * 子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被"屏蔽"了。 * 如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。 *  */public class PersonTest {public static void main(String[] args) {Student s = new Student("计算机科学与技术");s.eat();s.walk(10);s.study();}}/* * 3.重写的规定： * 方法的声明：权限修饰符 返回值类型 方法名(形参列表){ * //方法体 *  } * 约定俗称:子类中的叫重写的方法，父类中的叫被重写的方法。 * ① 子类重写的方法的方法名和形参列表必须和父类被重写的方法的方法名、形参列表相同;  * ② 子类重写的方法使用的访问权限不能小于父类被重写的方法的访问权限, *   特殊情况: 子类不能重写父类中声明为private权限的方法; *   ③ 返回值类型: *   &gt; 父类被重写的方法的返回值类型是void,则子类重写的方法的返回值类型只能是void; *   &gt; 父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类; *   &gt; 父类被重写的方法的返回值类型如果是基本数据类型(比如:double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须是:double)。 *    *   ④ 子类方法抛出的异常不能大于父类被重写的方法抛出的异常; *  * 注意：子类与父类中同名同参数的方法必须同时声明为非static的(即为重写)，或者同时声明为static的（不是重写）。 * 因为static方法是属于类的，子类无法覆盖父类的方法。 */public class PersonTest {public static void main(String[] args) {Student s = new Student("计算机科学与技术");s.eat();s.walk(10);System.out.println("*******************");s.study();Person p1 = new Person();p1.eat();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-super"><a href="#8-super" class="headerlink" title="8.super"></a>8.super</h2><h3 id="8-1super"><a href="#8-1super" class="headerlink" title="8.1super"></a>8.1super</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * super关键字的使用 * 1.super理解为:父类的 * 2.super可以用来调用:属性、方法、构造器  *  * 3.super的使用 * 3.1 我们可以在子类的方法或构造器中，通过"super.属性"或"super.方法"的方式，显式的调用 * 父类中声明的属性或方法。但是，通常情况下，我们习惯去省略这个"super." * 3.2 特殊情况:当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的  *  使用"super.属性"的方式，表明调用的是父类中声明的属性。 *  3.3 特殊情况:当子类重写了父类中的方法后，我们想在子类的方法中调用父类中被重写的方法时，必须显式的 *  使用"super.方法"的方式，表明调用的是父类中被重写的方法。 *  * 4.super调用构造器 *   4.1  我们可以在子类的构造器中显式的使用"super(形参列表)"的方式,调用父类中声明的指定的构造器 *   4.2 "super(形参列表)"的使用，必须声明在子类构造器的首行！ *    4.3 我们在类的构造器中，针对于"this(形参列表)"或"super(形参列表)"只能二选一，不能同时出现。 *    4.4 在构造器的首行，既没有显式的声明"this(形参列表)"或"super(形参列表)",则默认的调用的是父类中的空参构造器。super() *    4.5 在类的多个构造器中，至少有一个类的构造器使用了"super(形参列表)",调用父类中的构造器。 *   */public class SuperTest {public static void main(String[] args) {Student s = new Student();s.show();s.Study();Student s1 = new Student("Ton",21,"IT" );s1.show();System.out.println("***********************");Student s2 = new Student();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-子类对象实例化"><a href="#9-子类对象实例化" class="headerlink" title="9.子类对象实例化"></a>9.子类对象实例化</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/2add7cbc6ccf4e7b02966a050c178675.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/408eeec5cf31085be7d7e0321aa39b3d.png" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 子类对象实例化的全过程 *  * 1.从结果上看: * 子类继承父类以后，就获取了父类中声明的属性或方法。 * 创建子类的对象中，在堆空间中，就会加载所有父类中声明的属性。 *  * 2.从过程上看: * 当我们通过子类的构造器创建子类对象时,我们一定会直接或间接的调用其父类构造器，  * 直到调用了java.lang.Object类中空参的构造器为止。正因为加载过所有的父类结构，所以才可以看到内存中有 * 父类中的结构，子类对象可以考虑进行调用。 *  * 明确:虽然创建子类对象时，调用了父类的构造器，但自始至终就创建过一个对象，即为new的子类对象。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-面向对象特征之三：多态性"><a href="#10-面向对象特征之三：多态性" class="headerlink" title="10.面向对象特征之三：多态性"></a>10.面向对象特征之三：多态性</h2><h3 id="10-1多态性的理解"><a href="#10-1多态性的理解" class="headerlink" title="10.1多态性的理解"></a>10.1多态性的理解</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 面向对象之三:多态性 *  * 1.理解多态性:可以理解为一个事物的多种态性。 * 2.何为多态性: *  对象的多态性:父类的引用指向子类的对象(或子类的对象赋值给父类的引用) *  * 3.多态的使用：虚拟方法调用 * 有了对象多态性以后，我们在编译期，只能调用父类声明的方法，但在执行期实际执行的是子类重写父类的方法 * 简称：编译时，看左边；运行时，看右边。 *   *  若编译时类型和运行时类型不一致，就出现了对象的多态性(Polymorphism) *  多态情况下， *  “看左边”：看的是父类的引用（父类中不具备子类特有的方法） *  “看右边”：看的是子类的对象（实际运行的是子类重写父类的方法） *   *  4.多态性的使用前提： *  ① 类的继承关系 *  ② 方法的重写 *  5.对象的多态性:只适用于方法，不适用于属性(编译和运行都看左边) */public class PersonTest {public static void main(String[] args) {Person p1 = new Person();p1.eat();Man man = new Man();man.eat();man.age = 25;man.earnMoney();//************************************//对象的多态性，父类的引用指向子类的对象Person p2 = new Man();//Person p3 = new Woman();//多态的使用:当调用子父类同名同参数方法时，实际调用的是子类重写父类的方法---虚拟方法调用p2.eat();p2.walk();//p2.earnMoney();}}import java.util.Random;/* * 2.从编译和运行的角度看： * 重载，是指允许存在多个同名方法，而这些方法的参数不同。 * 编译器根据方法不同的参数表，对同名方法的名称做修饰。 * 对于编译器而言，这些同名方法就成了不同的方法。 * 它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的， * 即子类可以重载父类的同名不同参数的方法。所以：对于重载而言，在方法调用之前， * 编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”； * 而对于多态，只有等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法， * 这称为“晚绑定”或“动态绑定”。 *  * 引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚绑定，它就不是多态。” *///面试题：多态是编译时行为还是运行时行为？//证明如下：class Animal  { protected void eat() {System.out.println("animal eat food");}}class Cat  extends Animal  { protected void eat() {System.out.println("cat eat fish");}}class Dog  extends Animal  { public void eat() {System.out.println("Dog eat bone");}}class Sheep  extends Animal  { public void eat() {System.out.println("Sheep eat grass");} }public class InterviewTest {public static Animal  getInstance(int key) {switch (key) {case 0:return new Cat ();case 1:return new Dog ();default:return new Sheep ();}}public static void main(String[] args) {int key = new Random().nextInt(3);System.out.println(key);Animal  animal = getInstance(key);animal.eat(); }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2向下转型与向上转型"><a href="#10-2向下转型与向上转型" class="headerlink" title="10.2向下转型与向上转型"></a>10.2向下转型与向上转型</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">向下转型主要实现可以调用子类的特有的属性与方法<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Man</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>man<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>man<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>man<span class="token punctuation">.</span><span class="token function">earnMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ************************************</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对象的多态性，父类的引用指向子类的对象</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Person p3 = new Woman();</span><span class="token comment">// 多态的使用:当调用子父类同名同参数方法时，实际调用的是子类重写父类的方法---虚拟方法调用</span>p2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// p2.earnMoney();</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不能调用子类所特有的方法、属性，编译时，p2是Person类型，</span><span class="token comment">// p2.earnMoney();</span>p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span><span class="token comment">// p2.isSmoking = true;</span><span class="token comment">// 有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法，但是由于变量声明为父类类型，导致</span><span class="token comment">// 编译时，只能调用父类中声明的属性和方法。子类的属性和方法不能调用。</span><span class="token comment">// 如何才能调用子类所特有的属性和方法？</span><span class="token comment">// 使用强制类型转换符，也可称为:向下转型</span><span class="token class-name">Man</span> m1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Man</span><span class="token punctuation">)</span> p2<span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">earnMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span>isSmoking <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 使用强转时，可能出现ClassCastException异常</span><span class="token comment">// Woman w1 = (Woman)p2;</span><span class="token comment">// w1.goShopping();</span><span class="token comment">/* * instanceof关键字的使用 *  * a instanceof A:判断对象a是否是类A的实例。如果，返回true，如果不是，返回false; *  * 使用情境:为了避免在向下转型时出现ClassCastException异常，我们在进行向下转型之前，先进行 * instanceof的判断,一旦返回true,就进行向下转型。如果返回false，不进行向下转型。 *  * 如果a instanceof A返回true,则a instanceof B也返回true。 其中类B是类A的父类。 *  */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token keyword">instanceof</span> <span class="token class-name">Woman</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Woman</span> w1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Woman</span><span class="token punctuation">)</span> p2<span class="token punctuation">;</span>w1<span class="token punctuation">.</span><span class="token function">goShopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********Woman*********"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token keyword">instanceof</span> <span class="token class-name">Man</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Man</span> m2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Man</span><span class="token punctuation">)</span> p2<span class="token punctuation">;</span>m2<span class="token punctuation">.</span><span class="token function">earnMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*********Man************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********Person************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"***********object************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//向下转型的常见问题</span><span class="token comment">//练习</span><span class="token comment">//问题1:编译时通过，运行时不通过</span><span class="token comment">//举例一</span><span class="token comment">//Person p3 = new Woman();</span><span class="token comment">//Man m3 = (Man)p3;</span><span class="token comment">//举例二</span><span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Man</span> m4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Man</span><span class="token punctuation">)</span>p4<span class="token punctuation">;</span><span class="token comment">//问题二:编译通过，运行时也通过</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token comment">//问题三:编译不通过</span><span class="token comment">//Man m5 = new woman();</span><span class="token comment">//String str = new Date();</span><span class="token comment">//Object o = new Date();</span><span class="token comment">//String str1 = (String)o;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/c6dcce377d1fae98ba497cc11d3b4163.png" alt="img"></p><h3 id="10-3多态性的补充"><a href="#10-3多态性的补充" class="headerlink" title="10.3多态性的补充"></a>10.3多态性的补充</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 练习:子类继承父类 *  * 1.若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法， * 系统将不可能把父类里的方法转移到子类中。 *  * 2.对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量， * 这个实例变量依然不可能覆盖父类中定义的实例变量 *  */public class FieldMethodTest {public static void main(String[] args){Sub s= new Sub();System.out.println(s.count);//20s.display();//20Base b = s;//==:对于引用数据类型来讲，比较的是两个引用数据类型变量的地址值是否一样。System.out.println(b == s);//trueSystem.out.println(b.count);//10b.display();}}class Base {int count= 10;public void display() {System.out.println(this.count);}}class Sub extends Base {int count= 20;public void display() {System.out.println(this.count);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11object类"><a href="#11object类" class="headerlink" title="11object类"></a>11object类</h2><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * java.lang.Object类 * 1.Object类是所有Java类的根父类; * 2.如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类 * 3.Object类中的功能(属性、方法)就具有通用性。 * 属性:无 * 方法:equals() / toString() / getClass() / hashCode() / clone() /finalize() *  wait() 、notify()、notifyAll() *  * 4.Object类只声明了一个空参的构造器。 *  * 面试题: * final、finally、finalize的区别？ *  */public class ObjectTest {public static void main(String[] args) {}}class Order{}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-1Object类中的主要结构"><a href="#11-1Object类中的主要结构" class="headerlink" title="11.1Object类中的主要结构"></a>11.1Object类中的主要结构</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/d9de1281feb25f434a69f809adeb4a24.png" alt="img"></p><h3 id="11-2-操作符与equals方法"><a href="#11-2-操作符与equals方法" class="headerlink" title="11.2==操作符与equals方法"></a>11.2==操作符与<a href="https://so.csdn.net/so/search?q=equals&amp;spm=1001.2101.3001.7020">equals</a>方法</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import java.sql.Date;/* * 面试题: ==和equals的区别 *  * 一、回顾==的使用 * == : 运算符 * 1.可以使用在基本数据类型变量和引用数据类型变量中 * 2.如果比较的是基本数据类型变量：比较两个变量保存的数据是否相等。(不一定类型要相同) *    如果比较的是引用数据类型变量：比较两个对象的地址值是否相同,即两个引用是否指向同一个对象实体 *  补充: == 符号使用时，必须保证符号左右两边的变量类型一致。 * * 二、equals()方法的使用 * 1.是一个方法，而非运算符 * 2.只能适用于引用数据类型。 * 3.Object类中equals()的定义： * public boolean equals(Object obj){ * return (this == obj); * } * 说明：Object类中定义的equals()和==的作用是相同的，比较两个对象的地址值是否相同，即两个引用是否指向同一个对象实体。 *  * 4.像String、Date、File、包装类等都重写了Object类中的equals()方法. *  两个引用的地址是否相同，而是比较两个对象的“实体内容”是否相同。 *  * 5.通常情况下，我们自定义的类如果使用equals()的话，也通常是比较两个对象的"实体内容"是否相同。那么，我们 *    就需要对Object类中的equals()进行重写。 *  * 重写的原则:比较两个对象的实体内容是否相同。 *  */public class EqualsTest {public static void main(String[] args) {//基本数据类型int i = 10;int j = 10;double d = 10.0;System.out.println(i == j);//trueSystem.out.println(i == d); //true//boolean b =true;//System.out.println(i == b);char c = 10;System.out.println(i == c); //truechar c1 = 'A';char c2 = 65;System.out.println(c1 == c2); //true//引用数据类型Customer cust1 = new Customer("Tom" ,21);Customer cust2 = new Customer("Tom" ,21);System.out.println(cust1 == cust2); //falseString str1 = new String("BAT");String str2 = new String("BAT");System.out.println(str1 == str2); //falseSystem.out.println("*************************");System.out.println(cust1.equals(cust2));//falseSystem.out.println(str1.equals(str2));//trueDate date1 = new Date(23432525324L);Date date2 = new Date(23432525324L);System.out.println(date1.equals(date2));//true}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对称性：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。</li><li>自反性：x.equals(x)必须返回是“true”。</li><li>传递性：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。</li><li>一致性：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。</li><li>任何情况下，x.equals(null)，永远返回是“false”；x.equals(和x不同类型的对象)永远返回是“false”。</li></ul><h3 id="11-3toString的使用"><a href="#11-3toString的使用" class="headerlink" title="11.3toString的使用"></a>11.3toString的使用</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import java.util.Date;/* * Object类中toString()的使用 *  * 1.当我们输出一个引用对象时，实际上就是调用当前对象的toString() * 2.Object类中toString的定义方法 * public String toString() { *      return getClass().getName() + "@" + Integer.toHexString(hashCode()); *  } *  * 3.像String、Date、File、包装类等都重写了Object类中的toString()方法。 *  使得在调用toString()时，返回"实体内容"信息. *  * 4.自定义类如果重写toString()方法，当调用此方法时，返回对象的"实体内容". */public class ToStringTest {public static void main(String[] args) {Customer cust1 = new Customer("Tom" ,21);System.out.println(cust1.toString());//github4.Customer@15db9742System.out.println(cust1); //github4.Customer@15db9742 ---&gt; Customer[name = Tom,age = 21]String str = new String("MM");System.out.println(str);Date date = new Date(45362348664663L);System.out.println(date.toString());//Wed Jun 24 12:24:24 CST 3407}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-包装类-Wrapper-的使用"><a href="#12-包装类-Wrapper-的使用" class="headerlink" title="12.包装类(Wrapper)的使用"></a>12.包装类(Wrapper)的使用</h2><h3 id="12-1单元测试方法的使用"><a href="#12-1单元测试方法的使用" class="headerlink" title="12.1单元测试方法的使用"></a>12.1单元测试方法的使用</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import java.util.Date;import org.junit.Test;/* * java中的JUnit单元测试 *  * 步骤: * 1.选中当前项目工程 --》 右键:build path --》 add libraries --》 JUnit 4 --》 下一步 * 2.创建一个Java类进行单元测试。 *  此时的Java类要求:①此类是公共的 ②此类提供一个公共的无参构造器  * 3.此类中声明单元测试方法。 *   此时的单元测试方法:方法的权限是public,没有返回值，没有形参。 *  * 4.此单元测试方法上需要声明注解:@Test并在单元测试类中调用:import org.junit.Test; * 5.声明好单元测试方法以后，就可以在方法体内测试代码。 * 6.写好代码后，左键双击单元测试方法名：右键 --》 run as --》 JUnit Test *  * 说明:如果执行结果无错误，则显示是一个绿色进度条，反之，错误即为红色进度条。 */public class JUnit {int num = 10;//第一个单元测试方法@Testpublic void testEquals(){String s1 = "MM";String s2 = "MM";System.out.println(s1.equals(s2));//ClassCastException的异常//Object obj = new String("GG");//Date date = (Date)obj;System.out.println(num);show();}public void show(){num = 20;System.out.println("show()...");}//第二个单元测试方法@Testpublic void testToString(){String s2 = "MM";System.out.println(s2.toString());}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/9cacb9d5a49fbe6e8ca4f7831975db7d.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2ed96054861a4fa797a564eee2d09cbb.png" alt="img"></p><h3 id="12-2包装类的使用"><a href="#12-2包装类的使用" class="headerlink" title="12.2包装类的使用"></a>12.2包装类的使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 包装类的使用 * 1.java提供了8种基本数据类型对应的包装类，使得基本数据类型的变量具有类的特征 * 基本数据类型包装类 * byteByte * shortShort * int Integer * longLong * floatFloat * doubleDouble * booleanBoolean * charCharacter * 注意:其中Byte、Short、Integer、Long、Float、Double的父类是:Number * /</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-3包装类与基本数据类型相互转换"><a href="#12-3包装类与基本数据类型相互转换" class="headerlink" title="12.3包装类与基本数据类型相互转换"></a>12.3包装类与基本数据类型相互转换</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/fa0116bbaf03d264cc9650a3319da2a8.png" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/* * 2.基本数据类型、包装类、String三者之间的相互转换。 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WrapperTest</span> <span class="token punctuation">{</span><span class="token comment">//String类型---&gt; 基本数据类型、包装类,调用包装类的parseXxx()</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token comment">//String str1 = "123a";</span><span class="token comment">//错误的情况，可能会报错</span><span class="token comment">//int num1 = (int)str1;</span><span class="token comment">//Integer in1 = (Integer)str1;</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//124</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> b1 <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">}</span><span class="token comment">//基本数据类型、包装类---》String类型，调用String重载的valueOf(Xxx xxx)</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//方式1:连接运算</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//方式2:调用String的valueOf(Xxx xxx)</span><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">12.3f</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"12.3"</span><span class="token class-name">Double</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">12.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"12.4"</span><span class="token punctuation">}</span><span class="token comment">/* * JDK 5.0 新特性:自动装箱与自动拆箱 */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//int num1 = 10;</span><span class="token comment">////基本数据类型 --》 包装类的对象</span><span class="token comment">//method(num1);//Object obj = num1</span><span class="token comment">//自动装箱:基本数据类型 --》 包装类</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> in1 <span class="token operator">=</span> num2<span class="token punctuation">;</span><span class="token comment">//自动装箱</span><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> b2 <span class="token operator">=</span> b1<span class="token punctuation">;</span><span class="token comment">//自动装箱</span><span class="token comment">//自动拆箱：包装类 --》 基本数据类型</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num3 <span class="token operator">=</span> in1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//包装类 --》 基本数据类型:调用包装类的xxxValue()</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Integer</span> in1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> in1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Float</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token number">12.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> f2 <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//基本数据类型--》包装类,调用包装类的构造器</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//System.out.println(num1.toString());</span><span class="token class-name">Integer</span> in1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> in2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>in2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//报异常</span><span class="token comment">//Integer in3 = new Integer("123abc");</span><span class="token comment">//System.out.println(in3.toString());</span><span class="token class-name">Float</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token number">12.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Float</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token string">"12.3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Boolean</span> b3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token string">"true123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>isMale<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>isFemale<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">{</span><span class="token keyword">boolean</span> isMale<span class="token punctuation">;</span><span class="token class-name">Boolean</span> isFemale<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编程练习：向量类的运用<img src="https://img-blog.csdnimg.cn/img_convert/c80ea8669572b20379dbbd018fadb155.png" alt="img"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Vector</span><span class="token punctuation">;</span><span class="token comment">/* * 利用Vector代替数组处理：从键盘读入学生成绩（以负数代表输入结束）， * 找出最高分，并输出学生成绩等级。 *  * 提示：数组一旦创建，长度就固定不变，所以在创建数组前就需要知道它的长度。 * 而向量类java.util.Vector可以根据需要动态伸缩。 *  * 创建Vector对象：Vector v=new Vector(); * 给向量添加元素：v.addElement(Object obj);   //obj必须是对象 * 取出向量中的元素：Object  obj=v.elementAt(0); * 注意第一个元素的下标是0，返回值是Object类型的。 * 计算向量的长度：v.size(); * 若与最高分相差 * 10分内：A等； * 20分内：B等； * 30分内：C等； * 其它：D等 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VectorTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 1.实例化Scanner，用于从键盘获取学生成绩</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.创建Vector对象：Vector v=new Vector();相当于原来的数组</span><span class="token class-name">Vector</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.通过for(;;)或while(true)方式，给Vector中添加数组</span><span class="token keyword">int</span> maxScore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生成绩（以负数代表输入结束）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> score <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.2 当输入是负数时，跳出循环</span><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的数据非法，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 3.1 添加操作：：v.addElement(Object obj)</span><span class="token comment">// jdk5.0之前：</span><span class="token comment">// Integer inScore = new Integer(score);</span><span class="token comment">// v.addElement(inScore);//多态</span><span class="token comment">// jdk5.0之后：</span>v<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自动装箱</span><span class="token comment">// 4.获取学生成绩的最大值</span><span class="token keyword">if</span> <span class="token punctuation">(</span>maxScore <span class="token operator">&lt;</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>maxScore <span class="token operator">=</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 5.遍历Vector，得到每个学生的成绩，并与最大成绩比较，得到每个学生的等级。</span><span class="token keyword">char</span> level<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">elementAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// jdk 5.0之前：</span><span class="token comment">// Integer inScore = (Integer)obj;</span><span class="token comment">// int score = inScore.intValue();</span><span class="token comment">// jdk 5.0之后：</span><span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>maxScore <span class="token operator">-</span> score <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>level <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>maxScore <span class="token operator">-</span> score <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>level <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>maxScore <span class="token operator">-</span> score <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>level <span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>level <span class="token operator">=</span> <span class="token string">'D'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student-"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" score is "</span> <span class="token operator">+</span> score <span class="token operator">+</span> <span class="token string">",level is "</span> <span class="token operator">+</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13static"><a href="#13static" class="headerlink" title="13static"></a>13static</h2><h3 id="13-1static的理解"><a href="#13-1static的理解" class="headerlink" title="13.1static的理解"></a>13.1static的理解</h3><p>我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下，<strong>某些特定的数据在内存空间里只有一份。</strong></p><p>例如所有的中国人都有个国家名称，每一个中国人都共享这个国家名称，不必在每一个中国人的实例对象中都单独分配一个用于代表国家名称的变量。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * static 关键字的使用 *  * 1.static:静态的。 * 2.static 可以用来修饰:属性、方法、代码块、内部类。 *  * 3.使用 static 修饰属性:静态变量(或类变量)。 * 3.1  属性:是否使用 static 修饰，又分为:静态属性 VS 非静态属性(实例变量) *    实例变量:我们创建了类的多个对象，每个对象都独立的拥有了一套类中的非静态属性。 * 当修改其中一个非静态属性时，不会导致其他对象中同样的属性值的修饰。 *    静态变量:我们创建了类的多个对象，多个对象共享同一个静态变量。当通过静态变量去修改某一个变量时， * 会导致其他对象调用此静态变量时，是修改过的。 * 3.2 static 修饰属性的其他说明: * ① 静态变量随着类的加载而加载。可以通过"类.静态变量"的方式进行调用。 * ② 静态变量的加载要早于对象的创建。 * ③ 由于类只会加载一次，则静态变量在内存中也只会存在一次。存在方法区的静态域中。 *  * ④ 类变量实例变量 * 类yesno * 对象yesyes *  * 3.3 静态属性举例:System.out.Math.PI; *   */public class StaticTest {public static void main(String[] args) {Chinese.nation = "中国";Chinese c1 = new Chinese();c1.name = "姚明";c1.age = 40;c1.nation = "CHN";Chinese c2 = new Chinese();c2.name = "马龙";c2.age = 30;c2.nation = "CHINA";System.out.println(c1.nation); //编译不通过//Chinese.name = "张继科";}}//中国人class Chinese{String name;int age;static String nation;}/*  * 4.使用 static 修饰方法:静态方法 * ① 随着类的加载而加载，可以通过"类.静态方法"的方式调用 * ② 静态方法非静态方法 * 类yesno * 对象yesyes * ③ 静态方法中，只能调用静态的方法或属性 *   非静态的方法中，可以调用所有的方法或属性 *  * 5.static 注意点: *  5.1  在静态的方法内，不能使用 this 关键字、super 关键字 *   5.2 关于静态属性和静态方法的使用，大家从生命周期的角度去理解。 *    * 6.开发中，如何确定一个属性是否需要声明 static 的？ *  》 属性是可以被多个对象所共享的，不会随着对象的不同而不同的。 *  》 类中的常量也常常声明为 static *    *   开发中，如何确定一个方法是否要声明为 static 的？ *   》 操作静态属性的方法，通常设置为 static 的 *   》 工具类中的方法，习惯上声明为 static 的。比如：Math、Arrays、Collections *   */public class StaticTest {public static void main(String[] args) {Chinese.nation = "中国";Chinese c1 = new Chinese();//编译不通过//Chinese.name = "张继科";c1.eat();Chinese.show();//编译不通过//chinese.eat();//Chinese.info();}}//中国人class Chinese{String name;int age;static String nation;public void eat(){System.out.println("中国人吃中餐");//调用非静态结构this.info();System.out.println("name : " + name);//调用静态结构walk();System.out.println("nation : " + Chinese.nation);}public static void show(){System.out.println("我是一个中国人！");//eat();//name = "Tom";//可以调用静态的结构System.out.println(Chinese.nation);walk();}public void info(){System.out.println("name : " + name + ",age : " + age);}public static void walk(){}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/97cc52e6668ddb59b0a2fc1d63b99607.png" alt="img"></p><p>static的练习</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 编写一个类实现银行账户的概念，包含的属性有“帐号”、“密码”、“存款余额”、 * “利率”、“最小余额”，定义封装这些属性的方法。 * 账号要自动生成。编写主类，使用银行账户类，输入、输出 3 个储户的上述信息。 * 考虑：哪些属性可以设计成 static 属性。 *  */public class Account {private int id;//账号private String pwd = "000000";//密码private double balance; //存款余额private static double interestRate; //利率private static double minMoney = 1.0;  //最小余额private static int init = 1001;//用于自动生成 idpublic Account(){//账号自动生成id = init++;}public Account(String pwd,double balance){id = init++;this.pwd = pwd;this.balance = balance;}public String getPwd() {return pwd;}public void setPwd(String pwd) {this.pwd = pwd;}public static double getInterestRate() {return interestRate;}public static void setInterestRate(double interestRate) {Account.interestRate = interestRate;}public static double getMinMoney() {return minMoney;}public static void setMinMoney(double minMoney) {Account.minMoney = minMoney;}public int getId() {return id;}public double getBalance() {return balance;}@Overridepublic String toString() {return "Account [id=" + id + ", pwd=" + pwd + ", balance=" + balance + "]";}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class AccountTest {public static void main(String[] args) {Account acct1 = new Account();Account acct2 = new Account("qwerty",2000);Account.setInterestRate(0.012); Account.setMinMoney(100);System.out.println(acct1);System.out.println(acct2);System.out.println(acct1.getInterestRate()); System.out.println(acct1.getMinMoney());}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2单例-Singleton-设计模式"><a href="#13-2单例-Singleton-设计模式" class="headerlink" title="13.2单例(Singleton)设计模式"></a>13.2单例(<a href="https://so.csdn.net/so/search?q=Singleton&amp;spm=1001.2101.3001.7020">Singleton</a>)设计模式</h3><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例。并且该类只提供一个取得其对象实例的方法。如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将类的构造器的访问权限设置为 private，这样，就不能用 new 操作符在类的外部产生类的对象了，但在类内部仍可以产生该类的对象。因为在类的外部开始还无法得到类的对象，只能调用该类的某个静态方法以返回类内部创建的对象，静态方法只能访问类中的静态成员变量，所以，指向类内部产生的该类对象的变量也必须定义成静态的。</p><p>1饿汉式</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 单例设计模式: * 1.所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例 *   * 2.如何实现？ *   饿汉式VS懒汉式 *  * 3.区分饿汉式和懒汉式。 *    饿汉式：坏处:对象加载时间过长。 *         好处:饿汉式是线程安全的。 *  *   懒汉式：好处:延迟对象的创建。 *        坏处:目前的写法，会线程不安全。---》到多线程内容时，再修改 */public class SingletonTest {public static void main(String[] args) {//Bank bank1 = new Bank(); //Bank bank2 = new Bank(); Bank bank1 = Bank.getInstance();Bank bank2 = Bank.getInstance();System.out.println(bank1 == bank2);}}//单例的饿汉式class Bank{//1.私有化类的构造器private Bank(){}//2.内部创见类的对象//4.要求此对象也必须声明为静态的private static Bank instance = new Bank();//3.提供公共的静态的方法，返回类的对象。public static Bank getInstance(){return instance;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.<strong>单例模式的懒汉式</strong></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 单例的懒汉式实现 *  */public class SingletonTest2 {public static void main(String[] args) {Order order1 = Order.getInstance();Order order2 = Order.getInstance();System.out.println(order1 == order2);}}class Order{//1.私有化类的构造器private Order(){}//2.声明当前类对象，没有初始化。//此对象也必须声明为 static 的private static Order instance = null;//3.声明 public、static 的返回当前类对象的方法public static Order getInstance(){if(instance == null){instance = new Order();}return instance;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-类的成员之四：代码块"><a href="#14-类的成员之四：代码块" class="headerlink" title="14.类的成员之四：代码块"></a>14.类的成员之四：代码块</h2><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 类的成员之四:代码块（或初始化块） *  * 1.代码块的作用：用来初始化类、对象的 * 2.代码块如果有修饰的话，只能使用 static * 3.分类:静态代码块 vs 非静态代码块 *  * 4.静态代码块 * 》内部可以有输出语句 *  》随着类的加载而执行,而且只执行一次 *  》作用:初始化类的信息 *  》如果一个类中，定义了多个静态代码块，则按照声明的先后顺序执行 *  》静态代码块的执行，优先于非静态代码块的执行 *  》静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构 *  * 5.非静态代码块 *  &gt;内部可以有输出语句 *  &gt;随着对象的创建而执行 *  &gt;每创建一个对象，就执行一次非静态代码块。 *  &gt;作用:可以在创建对象时，对对象的属性等进行初始化。 *  &gt;如果一个类中，定义了多个非静态代码块，则按照声明的先后顺序执行 *  &gt;非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法。 *   * 对属性可以赋值的位置: *  ①默认初始化 *  ②显式初始化 *  ③构造器中初始化 *  ④有了对象以后，可以通过"对象.属性"或"对象.方法"的方式，进行赋值。 *  ⑤在代码块中赋值 */public class BlockTest {public static void main(String[] args) {String desc = Person.desc;System.out.println(desc);Person p1 = new Person();Person p2 = new Person();System.out.println(p1.age);Person.info();}}class Person{//属性String name;int age;static String desc = "我是一个青年";//构造器public Person(){}//static 的代码块static{System.out.println("hello,static block-1");//调用静态结构desc = "我是一个爱小说的人";info();//不能调用非静态结构//eat();//name = "Tom";}static{System.out.println("hello,static block-2");}//非 static 的代码块{System.out.println("hello,block-2");}{System.out.println("hello,block-1");//调用非静态结构age = 1;eat();//调用静态结构desc = "我是一个爱小说的人 1";info();}//方法public Person(String name,int age){this.name = name;this.age = age;}public void eat(){System.out.println("吃饭");}@Overridepublic String toString() {return "Person [name=" + name + ", age=" + age + "]";}public static void info(){System.out.println("我是一个快乐的人。");}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>静态初始化块举例 1</strong></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//总结:由父类到子类，静态先行class Root{static{System.out.println("Root 的静态初始化块");}{System.out.println("Root 的普通初始化块");}public Root(){System.out.println("Root 的无参数的构造器");}}class Mid extends Root{static{System.out.println("Mid 的静态初始化块");}{System.out.println("Mid 的普通初始化块");}public Mid(){System.out.println("Mid 的无参数的构造器");}public Mid(String msg){//通过 this 调用同一类中重载的构造器this();System.out.println("Mid 的带参数构造器，其参数值："+ msg);}}class Leaf extends Mid{static{System.out.println("Leaf 的静态初始化块");}{System.out.println("Leaf 的普通初始化块");}public Leaf(){//通过 super 调用父类中有一个字符串参数的构造器super("尚硅谷");System.out.println("Leaf 的构造器");}}public class LeafTest{public static void main(String[] args){new Leaf(); //new Leaf();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-final"><a href="#15-final" class="headerlink" title="15.final"></a>15.final</h2><pre class="line-numbers language-java1" data-language="java1"><code class="language-java1">/* * final:最终的 *  * 1.final可以用来修饰的结构:类、方法、变量 *  * 2.final用来修饰一个类:此类不能被其他类所继承。 *   比如:String类、System类、StringBuffer类 * 3.final修饰一个方法:final标记的方法不能被子类重写。 *   比如：Object类中的getClass()。  * 4.final用来修饰变量:此时的"变量"(成员变量或局部变量)就是一个常量。名称大写，且只能被赋值一次。 *  4.1 final修饰属性，可以考虑赋值的位置有:显式初始化、代码块中初始化、构造器中初始化 *   4.2 final修饰局部变量: *    尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。 *      一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。 *       * static final 用来修饰:全局常量 */public class FinalTest {final int WIDTH = 0;final int LEFT;final int RIGHT;//final int DOWN;{LEFT = 1;}public FinalTest(){RIGHT = 2;}public FinalTest(int n){RIGHT = n;}//public void setDown(int down){//this.DOWN = down;//}public void dowidth(){//width = 20;//width cannot be resolved to a variable}public void show(){final int NUM = 10;//常量//num += 20;}public void show(final int num){System.out.println(num);}public static void main(String[] args) {int num = 10;num = num + 5;FinalTest test = new FinalTest();//test.setDown(5);test.show(10);}}final class FianlA{}//class B extends FinalA{     //错误，不能被继承。////}//class C extends String{////}class AA{public final void show(){}}//class BB extends AA{// 错误，不能被重写。//public void show(){////}//}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-抽象类与抽象方法"><a href="#16-抽象类与抽象方法" class="headerlink" title="16.抽象类与抽象方法"></a>16.抽象类与抽象方法</h2><h3 id="16-1抽象类理解"><a href="#16-1抽象类理解" class="headerlink" title="16.1抽象类理解"></a>16.1抽象类理解</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * abstract 关键字的使用 *  * 1.abstract:抽象的 * 2.abstract 可以用来修饰的结构:类、方法 * 3.abstract 修饰类:抽象类 * 》 此类不能实例化 *  》 抽象类中一定有构造器，便于子类实例化时调用(涉及:子类对象实例化全过程) *  》 开发中，都会提供抽象类的子类，让子类对象实例化，实现相关的操作 *  * 4.abstract 修饰方法:抽象方法 *  &gt; 抽象方法，只有方法的声明，没有方法体。 *  &gt; 包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法 *  &gt; 若子类重写了父类中所有的抽象方法，此子类， * * abstract 使用上的注意点: * 1.abstract 不能用来修饰变量、代码块、构造器； *  * 2.abstract 不能用来修饰私有方法、静态方法、final 的方法、final 的类。 *  */public class AbstractTest {public static void main(String[] args) {//一旦 Person 类抽象了，就不可实例化//Person p1 = new Person();//p1.eat();}}abstract class Creature{public abstract void breath();}abstract class Person extends Creature{String name;int age;public Person(){}public Person(String name,int age){this.name = name;this.age = age;}//不是抽象方法//public void eat(){//System.out.println("人吃饭");//}//抽象方法public abstract void eat();public void walk(){System.out.println("人走路");}}class Student extends Person{public Student(String name,int age){super(name,age);}public void eat(){System.out.println("学生应该多吃有营养的。");}@Overridepublic void breath() {System.out.println("学生应该呼吸新鲜的无雾霾空气");}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-2抽象类应用"><a href="#16-2抽象类应用" class="headerlink" title="16.2抽象类应用"></a>16.2抽象类应用</h3><p>抽象类是用来模型化那些父类无法确定全部实现，而是由其子类提供具体实现的对象的类。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fae4ad700aef40c0402a7e092da91106.png" alt="img"></p><p>问题：卡车(Truck)和驳船(RiverBarge)的燃料效率和行驶距离的计算方法完全不同。Vehicle 类不能提供计算方法，但子类可以。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* Java 允许类设计者指定：超类声明一个方法但不提供实现，该方法的实现由子类提  供。这样的方法称为抽象方法。有一个或更多抽象方法的类称为抽象类。 * Vehicle 是一个抽象类，有两个抽象方法。 * 注意：抽象类不能实例化 new Vihicle()是非法的 */public abstract class Vehicle{public abstract double calcFuelEfficiency();//计算燃料效率的抽象方法public abstract double calcTripDistance();//计算行驶距离的抽象方法}public class Truck extends Vehicle{public double calcFuelEfficiency(){ //写出计算卡车的燃料效率的具体方法}public double calcTripDistance(){ //写出计算卡车行驶距离的具体方法}}public class RiverBarge extends Vehicle{public double calcFuelEfficiency() { //写出计算驳船的燃料效率的具体方法}public double calcTripDistance( )  {  //写出计算驳船行驶距离的具体方法}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-3创建抽象类的匿名子类对象"><a href="#16-3创建抽象类的匿名子类对象" class="headerlink" title="16.3创建抽象类的匿名子类对象"></a>16.3创建抽象类的匿名子类对象</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Num {}abstract class Creature{public abstract void breath();}abstract class Person extends Creature{String name;int age;public Person(){}public Person(String name,int age){this.name = name;this.age = age;}//不是抽象方法//public void eat(){//System.out.println("人吃饭");//}//抽象方法public abstract void eat();public void walk(){System.out.println("人走路");}}class Student extends Person{public Student(String name,int age){super(name,age);}public Student(){}public void eat(){System.out.println("学生应该多吃有营养的。");}@Overridepublic void breath() {System.out.println("学生应该呼吸新鲜的无雾霾空气");}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="16-4抽象类的练习"><a href="#16-4抽象类的练习" class="headerlink" title="16.4抽象类的练习"></a>16.4抽象类的练习</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/a36e51e665b20673f270cb9b2b921e20.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/56ace48e046b22da15db7100a2edfccb.png" alt="img"></p><p>1、Employee 类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 定义一个 Employee 类， * 该类包含：private 成员变量 name,number,birthday， * 其中 birthday 为 MyDate 类的对象； * abstract 方法 earnings()； * toString()方法输出对象的 name,number 和 birthday。 *  */public abstract class Employee {private String name;private int number;private MyDate birthday;public Employee(String name, int number, MyDate birthday) {super();this.name = name;this.number = number;this.birthday = birthday;}public String getName() {return name;}public void setName(String name) {this.name = name;}public int getNumber() {return number;}public void setNumber(int number) {this.number = number;}public MyDate getBirthday() {return birthday;}public void setBirthday(MyDate birthday) {this.birthday = birthday;}public abstract double earnings();@Overridepublic String toString() {return "name=" + name + ", number=" + number + ", birthday=" + birthday.toDateString() + "]";}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、MyDate 类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * MyDate 类包含:private 成员变量 year,month,day； * toDateString()方法返回日期对应的字符串：xxxx 年 xx 月 xx 日 */public class MyDate {private int year;private int month;private int day;public MyDate(int year, int month, int day) {super();this.year = year;this.month = month;this.day = day;}public int getYear() {return year;}public void setYear(int year) {this.year = year;}public int getMonth() {return month;}public void setMonth(int month) {this.month = month;}public int getDay() {return day;}public void setDay(int day) {this.day = day;}public String toDateString(){return year + "年" + month + "月" + day + "日";}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、SalariedEmployee 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 定义 SalariedEmployee 类继承 Employee 类，实现按月计算工资的员工处理。 * 该类包括：private 成员变量 monthlySalary；实现父类的抽象方法 earnings(), * 该方法返回 monthlySalary 值； * toString()方法输出员工类型信息及员工的 name，number,birthday。 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SalariedEmployee</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">double</span> monthlySalary<span class="token punctuation">;</span><span class="token comment">//月工资</span><span class="token keyword">public</span> <span class="token class-name">SalariedEmployee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> number<span class="token punctuation">,</span><span class="token class-name">MyDate</span> birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>number<span class="token punctuation">,</span>birthday<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">SalariedEmployee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">,</span> <span class="token class-name">MyDate</span> birthday<span class="token punctuation">,</span> <span class="token keyword">double</span> monthlySalary<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>monthlySalary <span class="token operator">=</span> monthlySalary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">earnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> monthlySalary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"SalariedEmployee ["</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、HourlyEmployee 类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 参照 SalariedEmployee 类定义 HourlyEmployee 类， * 实现按小时计算工资的员工处理。该类包括：private 成员变量 wage 和 hour； * 实现父类的抽象方法 earnings(),该方法返回 wage*hour 值； * toString()方法输出员工类型信息及员工的 name，number,birthday。 *  */public class HourlyEmployee extends Employee{private int wage;//每小时的工资private int hour;//月工作的小时数public HourlyEmployee(String name, int number, MyDate birthday) {super(name, number, birthday);}public HourlyEmployee(String name, int number, MyDate birthday, int wage, int hour) {super(name, number, birthday);this.wage = wage;this.hour = hour;}@Overridepublic double earnings() {return wage*hour;}public int getWage() {return wage;}public void setWage(int wage) {this.wage = wage;}public int getHour() {return hour;}public void setHour(int hour) {this.hour = hour;}public String toString(){return "HourlyEmployee[" + super.toString() + "]"; }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.PayrollSystem 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Calendar</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/* * 定义 PayrollSystem 类，创建 Employee 变量数组并初始化， * 该数组存放各类雇员对象的引用。利用循环结构遍历数组元素， * 输出各个对象的类型,name,number,birthday,以及该对象生日。 * 当键盘输入本月月份值时， * 如果本月是某个 Employee 对象的生日，还要输出增加工资信息。 *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PayrollSystem</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//方式一：</span><span class="token comment">//Scanner scanner = new Scanner(System.in);</span><span class="token comment">//System.out.println("请输入当月的月份：");</span><span class="token comment">//int month = scanner.nextInt();</span><span class="token comment">//方式二：</span><span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> month <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前的月份</span><span class="token comment">//System.out.println(month);//一月份：0</span><span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>emps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SalariedEmployee</span><span class="token punctuation">(</span><span class="token string">"马良"</span><span class="token punctuation">,</span> <span class="token number">1002</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token number">1992</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>emps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HourlyEmployee</span><span class="token punctuation">(</span><span class="token string">"博西"</span><span class="token punctuation">,</span> <span class="token number">2001</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token number">1991</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> emps<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> salary <span class="token operator">=</span> emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">earnings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月工资为："</span> <span class="token operator">+</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>month<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> emps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生日快乐！奖励 100 元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-接口"><a href="#17-接口" class="headerlink" title="17.接口"></a>17.接口</h2><h3 id="17-1接口的理解"><a href="#17-1接口的理解" class="headerlink" title="17.1接口的理解"></a>17.1接口的理解</h3><p>一方面，有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java 不支持多重继承。有了接口，就可以得到多重继承的效果。</p><p>另一方面，有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有 is-a 的关系，仅仅是具有相同的行为特征而已。例如：鼠标、键盘、打印机、扫描仪、摄像头、充电器、MP3 机、手机、数码相机、移动硬盘等都支持 USB 连接。</p><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要…则必须能…”的思想。继承是一个”是不是”的关系，而接口实现则是”能不能”的关系。</p><p><strong>接口的本质是契约，标准，规范</strong>，就像我们的法律一样。制定好后大家都要遵守。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/aec8823d72652f568ac820b927069e4e.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/729b5a0b77e2881568a2c029920e0f2e.png" alt="img"></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* 接口(interface)是抽象方法和常量值定义的集合。 * 接口的特点： * 用 interface 来定义。 * 接口中的所有成员变量都默认是由 public static final 修饰的。 * 接口中的所有抽象方法都默认是由 public abstract 修饰的。 * 接口中没有构造器。 * 接口采用多继承机制。 *//* * 接口的使用 * 1.接口使用 interface 来定义。 * 2.在 Java 中:接口和类是并列的两个结构 * 3.如何去定义两个接口:定义接口中的成员 * 》3.1 JDK7 及以前:只能定义全局常量和抽象方法 * 》全局常量:public static final 的,但是书写中，可以省略不写。 * 》抽象方法:public abstract 的 *  *  》3.2 JDK8:除了全局常量和抽象方法之外，还可以定义静态方法、默认方法(略)。 *  * 4.接口中不能定义构造器！意味着接口不可以实例化。 *  * 5.Java 开发中，接口通过让类去实现(implements)的方式来使用。 *   如果实现类覆盖了接口中的所有方法，则此实现类就可以实例化 *   如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类 *  * 6.Java 类可以实现多个接口 ---》弥补了 Java 单继承性的局限性 *  格式:class AA extends BB implementd CC,DD,EE *   *  7.接口与接口之间是继承,而且可以多继承 *   ********************************** * 8.接口的具体使用，体现多态性 *    接口的主要用途就是被实现类实现。（面向接口编程） * 9.接口，实际可以看作是一种规范 *  * 面试题:抽象类与接口有哪些异同？ *   */public class InterfaceTest {public static void main(String[] args) {System.out.println(Flayable.MAX_SPEED);System.out.println(Flayable.MIN_SPEED);}}interface Flayable{//全局变量public static final int MAX_SPEED = 7900;int MIN_SPEED = 1;//省略了 public static final //抽象方法public abstract void fly();void stop();//省略了 public abstract //Interfaces cannot have constructors//public Flayable(){////}}interface Attackable{void attack();}class Plane implements Flayable{@Overridepublic void fly() {System.out.println("飞机通过引擎起飞");}@Overridepublic void stop() {System.out.println("驾驶员减速停止");}}abstract class Kite implements Flayable{@Overridepublic void fly() {}}class Bullet extends Object implements Flayable,Attackable,CC{@Overridepublic void attack() {// TODO Auto-generated method stub}@Overridepublic void fly() {// TODO Auto-generated method stub}@Overridepublic void stop() {// TODO Auto-generated method stub}@Overridepublic void method1() {// TODO Auto-generated method stub}@Overridepublic void method2() {// TODO Auto-generated method stub}}//*********************************interface AA{void method1();}interface BB{void method2();}interface CC extends AA,BB{}/* * 接口的使用 * 1.接口使用上也满足多态性 * 2.接口，实际上就是定义了一种规范 * 3.开发中，体会面向接口编程！ *  */public class USBTest {public static void main(String[] args) {Computer com = new Computer();//1.创建了接口的非匿名实现类的非匿名对象Flash flash = new Flash();com.transferData(flash); //2. 创建了接口的非匿名实现类的匿名对象com.transferData(new Printer());//3. 创建了接口的匿名实现类的非匿名对象USB phone = new USB(){@Overridepublic void start() {System.out.println("手机开始工作");}@Overridepublic void stop() {System.out.println("手机结束工作");}};com.transferData(phone);//4. 创建了接口的匿名实现类的匿名对象com.transferData(new USB(){@Overridepublic void start() {System.out.println("mp3 开始工作");}@Overridepublic void stop() {System.out.println("mp3 结束工作");}});}}class Computer{public void transferData(USB usb){//USB usb = new Flash();usb.start();System.out.println("具体传输数据的细节");usb.stop();}}interface USB{//常量:定义了长、宽void start();void stop();}class Flash implements USB{@Overridepublic void start() {System.out.println("U 盘开始工作");}@Overridepublic void stop() {System.out.println("U 盘结束工作");}}class Printer implements USB{@Overridepublic void start() {System.out.println("打印机开启工作");}@Overridepublic void stop() {System.out.println("打印机结束工作");}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-2接口的练习"><a href="#17-2接口的练习" class="headerlink" title="17.2接口的练习"></a>17.2接口的练习</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/6593e549625053470aca56f338387d98.png" alt="img"></p><p>CompareObject 类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 定义一个接口用来实现两个对象的比较。 *  */public interface CompareObject {public int compareTo(Object o);//若返回值是 0,代表相等;若为正数，代表当前对象大；负数代表当前对象小}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>circle 类</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 定义一个 Circle 类，声明 redius 属性，提供 getter 和 setter 方法 */public class Circle {private Double radius;public Double getRadius() {return radius;}public void setRadius(Double radius) {this.radius = radius;}public Circle() {super();}public Circle(Double radius) {super();this.radius = radius;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ComparableCircle 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 定义一个 ComparableCircle 类，继承 Circle 类并且实现 CompareObject 接口。在 ComparableCircle 类中给出接口中方法 compareTo 的实现体， * 用来比较两个圆的半径大小。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComparableCircle</span> <span class="token keyword">extends</span> <span class="token class-name">Circle</span> <span class="token keyword">implements</span> <span class="token class-name">CompareObject</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">ComparableCircle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">ComparableCircle</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">ComparableCircle</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ComparableCircle</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span><span class="token comment">//错误的写法</span><span class="token comment">//return (int)(this.getRedius() - c.getRedius());</span><span class="token comment">//正确的方式一：</span><span class="token comment">//if(this.getRadius() &gt; c.getRadius()){</span><span class="token comment">//return 1;</span><span class="token comment">//}else if(this.getRadius() &lt; c.getRadius()){</span><span class="token comment">//return -1;</span><span class="token comment">//}else{</span><span class="token comment">//return 0;</span><span class="token comment">//}</span><span class="token comment">//当属性 radius 声明为 Double 类型时，可以调用包装类的方法</span><span class="token comment">//正确的方式二：</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//throw new RuntimeException("传入数据类型不匹配");</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>InterfaceTest 类</p><pre class="line-numbers language-none"><code class="language-none">/* * 定义一个测试类 InterfaceTest，创建两个 ComparableCircle 对象， * 调用 compareTo 方法比较两个类的半径大小。 *  */public class InterfaceTest {public static void main(String[] args) {ComparableCircle c1 = new ComparableCircle(3.4);ComparableCircle c2 = new ComparableCircle(3.6);int compareValue = c1.compareTo(c2);if(compareValue &gt; 0){System.out.println("c1 对象大");}else if(compareValue &lt; 0){System.out.println("c2 对象大");}else{System.out.println("两个一样的");}int compareValue1 = c1.compareTo(new String("AA"));System.out.println(compareValue1);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-类的内部成员之五：内部类"><a href="#18-类的内部成员之五：内部类" class="headerlink" title="18.类的内部成员之五：内部类"></a>18.类的内部成员之五：内部类</h2><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">/* * 类的内部成员之五:内部类 *  * 1.Java中允许将一个类A声明在另一个类B中,则类A就是内部类,类B就是外部类. *  * 2.内部类的分类:成员内部类VS局部内部类(方法内、代码块内、构造器内) *  * 3.成员内部类 * 》作为外部类的成员, * - 调用外部类的结构 * - 可以被static修饰 * - 可以被4种不同的权限修饰 *  *  》作为一个类， *  - 类内可以定义属性、方法、构造器等 *  - 可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承 *  - 可以abstract修饰 *  * 4.关注如下的3个问题 *   》 如何实例化成员内部类的对象 *   》 如何在成员内部类中区分调用外部类的结构 *   》 开发中局部内部类的使用  见《InnerClassTest1.java》 */public class InnerClassTest {public static void main(String[] args) {//创建Dog实例(静态的成员内部类)Person.Dog dog = new Person.Dog();dog.show();//创建Bird实例(非静态的成员内部类)//Person.Bird bird = new Person.Bird();Person p = new Person();Person.Bird bird = p.new Bird();bird.sing();System.out.println();bird.display("喜鹊");}}class Person{String name = "李雷";int age;public void eat(){System.out.println("人，吃饭");}//静态成员内部类static class Dog{String name;int age;public void show(){System.out.println("卡拉是条狗");//eat();}}//非静态成员内部类class Bird{String name = "杜鹃";public Bird(){}public void sing(){System.out.println("我是一只猫头鹰");Person.this.eat();//调用外部类的非静态属性eat();System.out.println(age);}public void display(String name){System.out.println(name);//方法的形参System.out.println(this.name);//内部类的属性System.out.println(Person.this.name);//外部类的属性}}public void method(){//局部内部类class AA{}}{//局部内部类class BB{}}public Person(){//局部内部类class CC{}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>面向对象学习的过程算是比较久，断断续续，希望后面有时间把这部分知识在复习一遍。</p>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11月Java总结</title>
      <link href="posts/1.html"/>
      <url>posts/1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="11月份Java学习总结"><a href="#11月份Java学习总结" class="headerlink" title="11月份Java学习总结"></a>11月份Java学习总结</h1><h2 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h2><h3 id="1-输入语句"><a href="#1-输入语句" class="headerlink" title="1 输入语句"></a>1 输入语句</h3><p>/*<br>如何从键盘获取不同类型的变量，需要使用Scanner类</p><p>具体步骤：<br>1.导包：import java.util.Scanner;<br>2.Scanner的实例化;<br>3.调用Scanner类的相关方法，来获取指定的变量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">IFTest</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//声明一个Scanner</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2switch-case-结构"><a href="#2switch-case-结构" class="headerlink" title="2switch-case 结构"></a>2switch-case 结构</h3><p><strong>注意： switch结构中的表达式，只能是如下的六种数据类型之一：byte、short、char、int、枚举类型(JDK5.0)、String类型(JDK7.0)</strong></p><p><strong>不能是：long，float，double，boolean</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8229365e772dcb701637caee187afa18.png" alt="结构"></p><p>/*<br>分支结构之二：switch-case</p><p>1.格式<br>switch(表达式){<br>case 常量1:<br>    执行语句1;<br>    //break;<br>case 常量2:<br>    执行语句2;<br>    //break;</p><p>…</p><p>default:<br>    执行语句n:<br>    //break;<br>}</p><p>2.说明:<br>① 根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，进入相应case结构中，执行相关语句。<br>  当调用完执行语句后，则仍然继续向下执行其他case语句，直到遇到break关键字或末尾结束为止。</p><p>② break, 可以使用switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构。</p><p>③ switch结构中的表达式，只能是如下的六种数据类型之一：byte、short、char、int、枚举类型(JDK5.0)、String类型(JDK7.0)<br>④ case 之后之能声明常量。不能声明范围。</p><p>⑤ break关键字是可选的。<br>⑥ default：相当于if-else结构中的else。<br>            default 结构是可选的，而且位置是灵活的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">class</span> <span class="token class-name">SwitchTest</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"twe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//*********************************</span><span class="token comment">//运行报错，不能运行boolean类型</span>    <span class="token comment">/*boolean isHandSome = true;switch(isHandSome){case true:System.out.println("可乐吗？？");break;case false:System.out.println("薯条吗？？");break;default:System.out.println("输入有误！！！");}*/</span><span class="token comment">//*********************************</span><span class="token class-name">String</span> season<span class="token operator">=</span> <span class="token string">"summer"</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>season<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span><span class="token string">"spring"</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"春暖花开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token string">"summer"</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"夏日炎炎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token string">"autumn"</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"秋高气爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span><span class="token string">"winter"</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"冬雪皑皑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"季节输入有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-嵌套循环"><a href="#3-嵌套循环" class="headerlink" title="3 嵌套循环"></a>3 嵌套循环</h3><p>/*<br>嵌套循环的使用<br>1.嵌套循环：将一个循环结构A声明在另一个循环结构B的循环体中，就构成了嵌套循环</p><p>2.<br>外层循环：循环结构B<br>内层循环：循环结构A<br>3.说明<br>① 内层循环遍历一遍，只相当于外层循环循环体执行了一次<br>② 假设外层循环需要执行m次，内层循环需要执行n次。此时内层循环的循环体一共执行了m * n次</p><p>4.技巧<br>外层循环控制行数，内层循环控制列数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span>  <span class="token class-name">ForForTest</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//******</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换行</span><span class="token comment">/**************************/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换行</span><span class="token punctuation">}</span><span class="token comment">/*****************/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//控制行数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//控制列数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*****************/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/***************************/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//九九乘法表</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> i<span class="token operator">*</span>j <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换行</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-break-continue"><a href="#4-break-continue" class="headerlink" title="4 break continue"></a>4 break continue</h3><p>1、break的使用</p><p>break语句用于终止某个语句块的执行<br>break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</p><p>2、continue的使用</p><p>continue 语句<br>continue只能使用在循环结构中<br>continue语句用于跳过其所在循环语句块的一次执行，继续下一次循环<br>continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环<br>3、return的使用</p><p>return：并非专门用于结束循环的，它的功能是结束一个方法。当一个方法执行到一个return语句时，这个方法将被结束。<br>与break和continue不同的是，return直接结束整个方法，不管这个return处于多少层循环之内。<br>4、特殊流程控制语句说明</p><p>break只能用于switch语句和循环语句中。<br>continue 只能用于循环语句中。<br>二者功能类似，但continue是终止本次循环，break是终止本层循环。<br>break、continue之后不能有其他的语句，因为程序永远不会执行其后的语句。<br>标号语句必须紧接在循环的头部。标号语句不能用在非循环语句的前面。<br>很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条语句上，然后执行它。但使程序容易出错。Java中的break和continue是不同于goto的。</p><hr><p>/*<br>break和countinue关键字的使用<br>                使用范围            循环中使用的作用(不同点)    相同点<br>break:            switch-case            结束当前循环                关键字后面不能声明执行语句<br>                循环结构中</p><p>countinue:        循环结构中            结束当次循环                关键字后面不能声明执行语句</p><p>*/</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BreakContinueTest</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//break;//1、2、3</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//1、2、3、5、6、7、9、10</span><span class="token comment">//System.out.println("该吃饭了！！！");</span><span class="token punctuation">}</span><span class="token comment">//System.out.println(i);</span><span class="token punctuation">}</span><span class="token comment">//********************************</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//break;//默认跳出包裹此关键字最近的一层的循环</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人随笔</title>
      <link href="posts/0.html"/>
      <url>posts/0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2022 11 11 经过两天的时间，用hexo与github搭建了一个个人博客，由于暂时还没学会服务器以及后端方面知识，也只是简答利用一些前端知识，以及一些npm组件去进行个性化编程，还有很多方面不足，后面会不断的进行改进</p><p>第二个再烁烁我搭建个人博客的目的：10月份，经过一段短暂实习，我接触到了数据库，一些后端知识。小一年的前端学习，其实以及到了一个瓶颈期。我想寻求突破。以往网络上面的前端项目很多。我想着通过后面的学习，我可以自己独立去开发一个app或者小程序，我可以自己写接口，渲染自己想写的数据。有了这个想法后，刚好碰上了广州疫情，图书馆半个月搞定了MySQL基础，也就是到11月10号。即将进入对Java的学习，同时也会一直跟MySQL高级篇的知识，谨以此博客来记录后端的学习过程，同时一些笔记，资料，也会同步上传。不希望知识3分钟热度，一个月发三篇博客吧，立个小flag。学习之路还很长，沉下心来，会有收货。</p>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
